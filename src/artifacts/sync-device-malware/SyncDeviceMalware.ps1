<#
    .SYNOPSIS
        Synchronizes malware from various repositories.
    .PARAMETER PerformActivity
        A flag indicating whether to perform the intended action.
#>
[CmdletBinding()]
param(
    [Parameter(Mandatory)]
    [bool] $PerformActivity = $false
)

# Note: Because the $ErrorActionPreference is "Stop", this script will stop on first failure.  
#       This is necessary to ensure we capture errors inside the try-catch-finally block.
$ErrorActionPreference = "Stop"

# Ensure we set the working directory to that of the script.
Push-Location $PSScriptRoot

trap
{
    # NOTE: This trap will handle all errors. There should be no need to use a catch below in this
    #       script, unless you want to ignore a specific error.
    $message = $Error[0].Exception.Message

    if ($message)
    {
        Write-Output "`nERROR: $message"
    }

    Write-Output "`nThe artifact failed to apply.`n"

    # IMPORTANT NOTE: Throwing a terminating error (using $ErrorActionPreference = "Stop") still
    # returns exit code zero from the PowerShell script when using -File. The workaround is to
    # NOT use -File when calling this script and leverage the try-catch-finally block and return
    # a non-zero exit code from the catch block.
    exit -1
}

try 
{
    if($PerformActivity -eq $true)
    {
        # Ensure that git allows long file names to avoid any issues with cloning the repositories. 
        git config --system core.longpaths true

        # Microsoft Defender Antivirus will take routine action against threats that are discovered 
        # on a device. Since the desire of this artifact is to intentionally clone repositories that
        # contain files with malware, this behavior needs to be disabled. Otherwise, the threats once
        # discovered would be removed. 

        if(! (Test-Path -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender")) 
        {
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"
        }

        $item = Get-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"

        if($null -eq $item.GetValue("DisableRoutinelyTakingAction")) 
        {
            New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender' -Name 'DisableRoutinelyTakingAction' -Value '00000001' -PropertyType DWORD -Force | Out-Null
        } else 
        {
            Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender' -Name 'DisableRoutinelyTakingAction' -Value '00000001' -Force | Out-Null
        }

        # Configure membeership for the Microsoft Active Protection Service.
        Set-MpPreference -MAPSReporting Advanced

        # Ensure that Microsoft Defender Antivirus is configured to always send samples. 
        Set-MpPreference -SubmitSamplesConsent SendAllSamples

        $path = "C:\Threats\$(-Join ((48..57) + (97..122) | Get-Random -Count 10 | ForEach-Object {[char]$_}))"

        if(! (Test-Path -Path $path -PathType Container)) 
        {
            New-Item -Path $path -ItemType Directory | Out-Null 
        }
    
        $repos = @()

        # Below repositories are publicly available on GitHub and they contain files that are malware, ransomeware, or a virus.
        # None of these repositories should be cloned to a device that is joined Azure Active Directory, or a domain, that is 
        # not used within the isolate lab environment.

        $repos += 'https://github.com/0x48piraj/MalWAReX.git'
        $repos += 'https://github.com/acastillorobles77/MalwareDatabase.git'
        $repos += 'https://github.com/Cryptware-Apps/Malware-Database.git'
        $repos += 'https://github.com/Da2dalus/The-MALWARE-Repo.git'
        $repos += 'https://github.com/fabrimagic72/malware-samples.git'
        $repos += 'https://github.com/HynekPetrak/javascript-malware-collection.git'
        $repos += 'https://github.com/HynekPetrak/malware-jail.git'
        $repos += 'https://github.com/InQuest/malware-samples.git'
        $repos += 'https://github.com/maltek-labs/Malware-archive.git'
        $repos += 'https://github.com/malwares/DangerousZone.git'
        $repos += 'https://github.com/MalwareSamples/Linux-Malware-Samples.git'
        $repos += 'https://github.com/MalwareSamples/Malware-Feed.git'
        $repos += 'https://github.com/mantvydasb/RedTeaming-Tactics-and-Techniques.git'
        $repos += 'https://github.com/maxamin/The-Awesome-And-Dangerous-collection.git'
        $repos += 'https://github.com/NavyTitanium/Misc-Malwares.git'
        $repos += 'https://github.com/Pyran1/MalwareDatabase.git'
        $repos += 'https://github.com/vxunderground/MalwareSourceCode.git'
        $repos += 'https://github.com/ytisf/theZoo.git'

        foreach($repository in $repos) {
            $target = "$(-Join ((48..57) + (97..122) | Get-Random -Count 10 | ForEach-Object {[char]$_}))"

            $process = Start-Process -FilePath "C:\Program Files\Git\bin\git.exe" -ArgumentList "clone $repository $target" -PassThru -Wait -WorkingDirectory $path

            if ($process.ExitCode -ne 0)
            {
                Write-Error "Error! Git clone failed with exit code $($p.ExitCode)"
            }
        }

        # Scan the root directory where the repositories full of malware were cloned.
        Start-MpScan -ScanType CustomScan -ScanPath $path
    }

    Write-Output "`nThe artifact was applied successfully.`n"
}
finally
{
    Pop-Location
}